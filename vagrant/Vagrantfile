# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.define "dockerhost" do |docker|
    docker.vm.box = "ubuntu/xenial64"
    docker.vm.provider "virtualbox" do |vb|
      vb.memory = "8192"  
    end
    docker.vm.hostname = "docker01"
    docker.vm.network "private_network", ip: "192.168.55.100"

    # Sync parent directory to VM
    config.vm.synced_folder "../", "/opt"

    # Install Docker in the VM
    docker.vm.provision "shell", inline: <<-SHELL
      apt update && apt upgrade -y
      apt install -y apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common
      sudo install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      chmod a+r /etc/apt/keyrings/docker.gpg
      echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-get -y install docker-ce docker-ce-cli containerd.io # docker-buildx-plugin docker-compose-plugin
      docker -v
      
      cd /opt

      # Netzwerke erstellen
      docker network create FRONTEND
      docker network create BACKEND

      # Service php-apache
      docker build -t php-apache ./php
      docker run -d --name M300_LB3_php-apache \
          --restart on-failure:10 \
          --cpus=2 \
          --memory=2g \
          --env-file ./mysql/.env \
          -v ./php/src:/var/www/html/ \
          -p 8000:80 \
          --network BACKEND \
          php-apache

      # Service db
      docker build -t db ./mysql
      docker run -d --name M300_LB3_db \
          --restart on-failure:10 \
          --cpus=2 \
          --memory=2g \
          --env-file ./mysql/.env \
          -v ./mysql/data:/var/lib/mysql \
          -p 9906:3306 \
          --network BACKEND \
          db

      # Service phpmyadmin
      docker run -d --name M300_LB3_phpmyadmin \
          --restart on-failure:10 \
          --cpus=2 \
          --memory=2g \
          -e PMA_HOST=db \
          -p 8080:80 \
          --network FRONTEND \
          --network BACKEND \
          phpmyadmin/phpmyadmin

      # Service nginx
      docker run -d --name M300_LB3_nginx \
          --restart on-failure:10 \
          --cpus=2 \
          --memory=2g \
          -p 80:80 \
          -v ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
          --network FRONTEND \
          nginx:latest


    SHELL
  end
end